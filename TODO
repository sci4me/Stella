Features:
 - Entities
   - Item Entities
   - Other Entities? (eventually, TM)
 - Main Menu
   - Ability to create new worlds, load saved worlds, edit settings, and quit
 - Save Games
   - This ties into chunk management pretty significantly
     - In a real-world scenario, whenever we want to _get_ a chunk
       We first need to check if that chunk already exists, possibly in a cache, or on disk
       If not, only then do we generate it.
     - Whenever we want to unload a chunk, say because the player walked away from it,
       we need to serialize it to disk somehow. Or possibly a chunk cache, before disk.
 - Audio
   - Obviously we'll probably want to implement the basics:
     - Ability to play music; streaming audio
     - Ability to play short sound effects
 - Particle Systems

Code/Dev Features:
 - Internal
   - #define internal static
 - HOT CODE RELOAD!!!!!
   - Definitely non-trivial to implement!
     - We have a ton of state.. sorta.
     - Much of it is either from malloc or
       allocated by stb_ds.h...
   - Totally worth doing though!
     - Not hard conceptually: just use a dynamic
       library to hold the actual game code, and
       a "playform layer" (although in our case,
       it won't be a true _platform_ layer.. but..
       semantics.. n stuff..)
       And then just uh, have this platform layer (what
       gets build as the actual .exe) load and reload
       the dynamic library if it changes.
       Just have to be really careful/specific/controlled/whatever
       about memory; all allocation must happen from within
       the platform layer so that when the dynlib reloads, it can
       just keep using that same memory.
 - Shader Abstraction
   - Bind/Unbind
   - Ability to handle uniforms
 - Framebuffer abstraction
   - "Just a wrapper" for OpenGL framebuffers
     - Ability to create and destroy them
     - Ability to bind and unbind them
     - Ability to configure what buffers/textures are attached to the FBO
       - i.e.  attach a texture to `GL_COLOR_ATTACHMENT0`
 - Logging !!!
   - Configurable (?)
   - Console Logging
   - File Logging
   - printf style API
 - Better Build System
 - Remove glm
   - It's a great library and all, but... run `tokei` on it...
     - 62,360 total lines. That's not insignificant!
     - It's the largest library we have in `/vendor`
     - Second largest is imgui at 34,207
     - Third largest is GLEW at 29,526
   - Removing as much of this library code as possible
     would likely improve build time. (inb4...)

Quality:
 - Key/Mouse Event Dispatch / Handling
   - Instead of having to like, hackily debounce keys with a static bool...
 - Shift clicking in inventories!
 - Ability to select part of a stack vs only the entire thing
 - Click outside of ImGui window to close it? Maybe?
   - For in-game UIs? Or, some of them?
     - Inventory, Chest, Furnace, etc.?
   - Also, pressing E opens the inventory, shouldn't it close it too?
 - Instead of using N textures for ores that are diminishing,
   just render them differently by using different UVs!
 - Tests
   - It's starting to get to the point where we have easily
     testable things that probably _should_ be tested.
 - Change from "init" and "free" to constructors and destructors
   - I didn't want to have to do it, but... fucking... C++ yo.
     - The problem with init and free is that you can't change
       the parameter types when you're overriding it in a
       child struct. So. F.
   - Not 100% convinced about this yet, so we'll push it off
     - But probably, we want to do this?... ..er.. yeah.
 - Organization
   - Probably only want one level of subdirectory in `src`
   - Namespaces! structs! etc.
 - Maybe use references more? And const references? er....
   - Definitely need to do some research/learning, etc. to know for sure...
     - But maybe.. maybe it's a good idea in some/many places. Dunno.    
 - Combine `batch` and `chunk` shaders?
   - Maybe not; I'm not sure if this is a good idea or not
     - Maybe it will be in the short term but we'll have to change it later on anyway?
     - Maybe we can just use a single shader and just pass it the data it needs to handle the cases instead of using multiple shaders?
       - Definitely not once we start doing less-than-trivial things
         - Lighting
         - OpenGL in ImGui
   - So, yeah uhm, maybe don't combine them? I don't even know.
   - Although... if I eventually want the ability to tint chunk tiles anyway,
     then the shaders become equivalent, so, yes.