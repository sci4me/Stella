Features:
 - Entities
   - Item Entities
   - Other Entities? (eventually, TM)
 - Main Menu
   - Ability to create new worlds, load saved worlds, edit settings, and quit
 - Save Games
   - This ties into chunk management pretty significantly
     - In a real-world scenario, whenever we want to _get_ a chunk
       We first need to check if that chunk already exists, possibly in a cache, or on disk
       If not, only then do we generate it.
     - Whenever we want to unload a chunk, say because the player walked away from it,
       we need to serialize it to disk somehow. Or possibly a chunk cache, before disk.
 - Audio
   - Obviously we'll probably want to implement the basics:
     - Ability to play music; streaming audio
     - Ability to play short sound effects
 - Particle Systems
 - Time Step Handling
   - Currently we aren't doing _anything_
     - We're just updating and rendering in a loop
   - We _at least_ want to do something like "semi-fixed timestep"
     - Not perfect...
     - The "best" option is to use interpolation for remaining
       time. But, this is a fair amount of overhead (on the programmer!)
       especially once we consider things like tiles that are doing their
       update logic, etc.
       I find it hard to believe that I'll actually do this.
 - Shift clicking in inventories!
 - Ability to select part of a stack vs only the entire thing
 - Click outside of ImGui window to close it? Maybe?
   - For in-game UIs? Or, some of them?
     - Inventory, Chest, Furnace, etc.?

Code/Dev Features/Quality:
 - Abstract the renderer (and the OpenGL interface)
   - i.e. Game code will use our abstracted renderer to do all
     rendering instead of calling OpenGL.
   - In the future, if we ever wanted to have renderers implemented with
     an API other than OpenGL, we could do that and just swap them out as
     desired since it's abstracted.      
 - Can we just export libc symbols ourselves?
   - This could potentially allow us to 
     avoid having to modify library code
     - i.e. instead of mlc_malloc just have malloc
     - Libraries would just link to our versions of
       these symbols.
     - Seems feasible..
 - Clean up `linux_platform.cpp`
   - And `linux64_syscall.cpp` while you're at it :P
   - But for realsies... like... damn.
 - Ctrl+C takes a LONG time to close the program
   - Is this just because we don't explicitly handle
     the signal? errrr..... yeeeeaaaahhhhhhh...
 - Asset files
   - _Eventually_ (TM), we'll want to have a custom asset file
     format instead of just loading PNGs from disk, for example.
 - Composable shaders
   - Well, actually, calling it that sounds like something
     a bit different than what I meant here...
     - Just a preprocessor to do things like #include for our
       GLSL code; this will be relevant when we start to care
       about graphical quality and want to be doing more
       GPU-side work.
 - Set window positions when opening them
   - Not sure how exactly to do this well
   - But, just letting imgui default the positions
     seems to be no bueno.
 - Structure the user input code such that we don't have to
   constantly check ImGuiIO::WantXXX all throughout our code.
   - Should be able to just clear the input members that get
     consumed (potentially) by imgui as a step between imgui
     update logic and the game logic? Probably?
 - Fun idea that we won't do any time soon:
   - Write a sort of uh... eh...
     A preprocessor of our own that looks for things
     marked up with some no-op macro with a specific name
     By things I mean 1. structs and 2. struct members
     It would generate serialization and deserialization code for us.
     Wouldn't really be all that hard.. I think..
   - Not sure if we really _want_ this..... so.. idk. Maybe?
 - Okay, I'm going to put this in "TODO", but...
   I'm definitely not convinced that this should be done
   or that it shouldn't be done.
     - Replace imgui with our own immediate-mode UI code
       - On the one hand, it gives us all the benefits of using 
         handmade code rather than depending on a library...
       - On the other hand, it's some amount of work to approach
         an acceptable level of quality relative to Dear ImGui.
       - On yet another hand though, uh, it'd be fun and educational...
       - Don't necessarily have to do it any time soon!
         - Especially since I'm so unsure about it right now
         - Plenty of other work to do that is probably more important.
 - Do something about our library situation
   - First of all, we almost certainly won't
     be able to avoid modifying some/all of them
     in order not to depend on libc; maybe(???!!!)
     we could.. like.. just.. define the libc symbols
     ourselves? Errrhhhhh... yeaahhhh..... hmh. Would
     be GREAT if we could get away with not modifying
     the libraries... but... yknow. I don't know.
   - Regardless of the prior point, we should like,
     actually track the version of the library. For
     example, I have NO IDEA what commit of imgui I have.
     For all I know, I may have just downloaded master from
     GH and called it a day! So... yeah, we should do something
     better about that while maintaining only having the
     minimum set of files in the repo.
 - Do something about the fact that we have
   maths.cpp and also math.cpp...
 - Format strings with %
   - Because fuck printf and friends
 - Merge the ctime files!
   - I split them because the linux version
     of ctime wouldn't handle the Casey version
     correctly...
 - Proper shutdown
   - Right now I just deinit stuff as I remember to, but
     it's entirely possible that I haven't gotten everything.
   - Do we care?
     - In some sense, no. The OS will free resources our process
       was using when the process exits, so...... why slow down
       shutdown time for nothing?
       - On the other hand, maybe it's better to make sure things
         are shut down properly?
         - Certainly for things like files, we probably want to be
           sure we're closing them, etc.
 - Instead of rendering layer 1 and 2 with
   Batch_Renderer, what if we just did the same
   thing we do for Chunks? i.e. render them when
   they change and then uh, yknow, .. yeah.
   And of course, we could easily have a tile flag
   that says a tile wants to be rendered per-frame
   using Batch_Renderer still, in case of animated
   tiles, etc.
 - In-Game Profiler
   - Instrumentation; use it
   - We've started on this...
     - Need to update it to actually work
       - Use rdtsc...
 - Make our own String type
 - Rename Tile to Tile_Entity
 - Internal
   - #define internal static
   - Do we really care? er..
 - HOT CODE RELOAD!!!!!
   - So we've pretty much done this at this point...
   - May still be some things that need fixed though.
 - Shader Abstraction
   - Bind/Unbind
   - Ability to handle uniforms
 - Framebuffer abstraction
   - "Just a wrapper" for OpenGL framebuffers
     - Ability to create and destroy them
     - Ability to bind and unbind them
     - Ability to configure what buffers/textures are attached to the FBO
       - i.e.  attach a texture to `GL_COLOR_ATTACHMENT0`
 - Logging !!!
   - Configurable (?)
   - Console Logging
   - File Logging
   - printf style API
 - Better Build System

Quality/Optimization:
 - Fix the fucking zoom oh my god it's so miserable to use!!!
   - Too slowwwww and like, ... we don't want linear...
     - But then, what _do_ we want? *shrugs*
 - Dynamically load everything instead of dynamically linking
   - i.e. remove -lX11 -lGL etc.
     - Is this worth doing? Why? etc.
       - Well for one thing, it's probably faster?
         - At least at compile time?
 - Tests
   - It's starting to get to the point where we have easily
     testable things that probably _should_ be tested.
 - Organization
   - Probably only want one level of subdirectory in `src`
   - Namespaces! structs! etc.
     - We've done some of this, but it's inconsistent
   - Could probably apply this to the TODO file itself tbh lol
   - OMG WE REALLY NEED TO DO THIS!!!
     - At the time of writing this text:
       - 26 files!!!
       - 3196 lines!!! 
     - Dependencies between files is getting more annoying.....
       - Better organization should help
         - If not, resort to hpps
 - Maybe use references more? And const references? er....
   - Definitely need to do some research/learning, etc. to know for sure...
     - But maybe.. maybe it's a good idea in some/many places. Dunno.    
 - Combine `batch` and `chunk` shaders?
   - Maybe not; I'm not sure if this is a good idea or not
     - Maybe it will be in the short term but we'll have to change it later on anyway?
     - Maybe we can just use a single shader and just pass it the data it needs to handle the cases instead of using multiple shaders?
       - Definitely not once we start doing less-than-trivial things
         - Lighting
         - OpenGL in ImGui
   - So, yeah uhm, maybe don't combine them? I don't even know.
   - Although... if I eventually want the ability to tint chunk tiles anyway,
     then the shaders become equivalent, so, yes.


So, I found this in Handmade Hero:
  extern "C" {
      int NvOptimusEnablement = 0x01;
      int AmdPowerXpressRequestHighPerformance = 0x01;
  }
Supposedly this is to suggest to graphics drivers
that we want to use the discrete GPU rather than
the iGPU. #Wack